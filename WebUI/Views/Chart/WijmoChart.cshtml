@{
    ViewBag.Title = Model.Title;
}

<h2>@Model.Title</h2>
@using (Html.BeginForm())
{
    <div style="margin-top:5px; text-align:right;">
        @if (Model.ZoomEnable)
        {
            <input id="btnResetZoom" name="btnResetZoom" style="width:80px;" type="button" value="リセット" />
        }
        @if (Model.ChartTypes.Length > 1 && Model.ChartTypes.Contains("line"))
        {
            <input id="btnGraphLineType" name="btnGraphLineType" class="btnBarType" bartype="line" style="width:80px;" type="button" value="折れ線" />
        }
        @if (Model.ChartTypes.Length > 1 && Model.ChartTypes.Contains("bar"))
        {
            <input id="btnGraphBarType" name="btnGraphBarType" class="btnBarType" bartype="bar" style="width:80px;" type="button" value="棒グラフ" />
        }
        <input id="btnBack" name="back" style="width:80px;" type="submit" value="戻る" />
    </div>

    <div>
        <table id="searchCondition" style="margin-top:10px; margin-bottom:10px;float:left;">
            <tr>
                <td valign="middle">
                    <span style="padding-right:10px;">項目</span>
                </td>
                @if (Model.ChartYAxisLables.Count > 0)
                {
                    var i = 0;
                    var dic = Model.ChartYAxisLables[i];
                    var j = 0;
                    <td valign="middle">
                        <select id="@string.Format("ChartAxis{0}",i)" data-axisindex="@i" class="ChartAxis">
                            @foreach (var kv in dic)
                            {
                                if (j++ == i)
                                {
                                    <option value="@kv.Key" selected="selected">@kv.Value</option>
                                }
                                else
                                {
                                    <option value="@kv.Key">@kv.Value</option>
                                }
                            }
                        </select>
                    </td>
                }
            </tr>
        </table>
        @if (Model.ChartYAxisLables.Count > 1)
        {
            var i = Model.ChartYAxisLables.Count - 1;
            var dic = Model.ChartYAxisLables[i];
            //var j=0;
            <table id="searchCondition" style="margin-top:10px; margin-bottom:10px;float:right;">
                <tr>
                    <td valign="middle"></td>
                    <td valign="middle">
                        <select id="@string.Format("ChartAxis{0}",i)" data-axisindex="@i" class="ChartAxis">
                            <option value="0"></option>
                            @foreach (var kv in dic)
                            {
                                <option value="@kv.Key">@kv.Value</option>
                                @*if (j++ == i)
                                    {
                                        <option value="@kv.Key" selected="selected">@kv.Value</option>
                                    }
                                    else
                                    {
                                        <option value="@kv.Key">@kv.Value</option>
                                    }*@
                            }
                        </select>
                    </td>
                </tr>
            </table>
        }
        <div style="clear:both;"></div>
    </div>
    <div style="width:100%;margin:0 auto;" id="canvasDiv">
        <div id="wijcompositechart">
        </div>
    </div>

}

@section Script{
    <script type="text/javascript">

    //Date.prototype.diff = function(date){
    //    return parseInt(Math.floor( (this.getTime() - date.getTime())/(24 * 60 * 60 * 1000)));
    //}

    function adjustHeight() {
        //debugger;
        var windowHeight = getWindowHeight();
        var widdowWidth = $("#main").innerWidth();//  getWindowWidth();
        //console.log(widdowWidth);
        var footerHeight = $("footer").outerHeight(true);
        var maxWidth = widdowWidth;
        var maxHeight = windowHeight - footerHeight - 200;
        if (maxWidth >= maxHeight * 2) {
            maxWidth = maxHeight * 2;
        }
        else {
            maxHeight =Math.min( maxHeight, maxWidth / 2);
        }

        $("#canvasDiv").css("height", maxHeight);
        $("#canvasDiv").css("width", maxWidth);
    };

    $(function () {
        adjustHeight();
        $(window).resize(adjustHeight);
        //$(window).scrollTop(70);

        var ctx = document.getElementById("canvas").getContext("2d");
        window.myBar = new Chart(ctx, barConfig);

        $("select").wijcombobox();
        $("#btnResetZoom").click(resetZoom);
        $(".btnBarType").click(function () {
            setChartType($(this).attr('bartype'));
        });

        $(".ChartAxis").change(function(){
            window.lastUnitStepSize=null;
            window.scalemin=null;
            window.scalemax=null;
            InitChartData();
        });

        InitChartData();
    });
    function resetZoom() {
        @*@if (!string.IsNullOrEmpty( Model.XAxesType) && !string.IsNullOrEmpty( Model.XAxesTimeUnit)){
            @Html.Raw(string.Format(@"
        window.myBar.scales['x-axis-0'].options.time.unitStepSize ={0};", Model.XAxesUnitStepSize))
        }*@

        //window.myBar.resetZoom();
        window.lastUnitStepSize=null;
        window.scalemin=null;
        window.scalemax=null;
        InitChartData();
    }

    function setChartType(type) {
        if (barConfig.type == type) {
            return;
        }

        barConfig.type = type;
        InitChartData();
        return;

        var tmpMax_X, tmpMin_X;

        var helpers = Chart.helpers;
        var chartInstance = window.myBar;
        helpers.each(chartInstance.scales, function (scale, id) {
            //soramoto start
            // you have to consider about scale.options.ticks.max/min!
            if (scale.options.time) {
                if (scale.options.time.max) tmpMax_X = scale.options.time.max.clone();
                if (scale.options.time.min) tmpMin_X = scale.options.time.min.clone();
            }
            else if (scale.options.type &&  scale.options.type=="category"){
                if (scale.options.ticks.max)  tmpMax_X = scale.options.ticks.max;
                if (scale.options.ticks.min)  tmpMin_X = scale.options.ticks.min;
            }
        });

        window.myBar.destroy();
        if (window.lastChartConfig){
            setChartConfig(window.lastChartConfig);
        }
        var tmpMax_Y1=window.lastTickMax_Y1;
        var tmpMax_Y2=window.lastTickMax_Y2;
        if (tmpMax_Y1)
        {
            var maxY1=getMaxtick(tmpMax_Y1);
            barConfig.options.scales.yAxes[0].ticks.max=maxY1;
        }
        if (tmpMax_Y2)
        {
            var maxY2=getMaxtick(tmpMax_Y2);
            barConfig.options.scales.yAxes[1].ticks.max=maxY2;
        }
        var ctx = document.getElementById("canvas").getContext("2d");
        window.myBar = new Chart(ctx, barConfig);

        chartInstance = window.myBar;
        helpers.each(chartInstance.scales, function (scale, id) {
            scale.options = helpers.configMerge(scale.options, scale.originalOptions);
            //soramoto start
            if (scale.options.time) {
                if (tmpMax_X) scale.options.time.max = tmpMax_X.clone();	//sora
                if (tmpMin_X) scale.options.time.min = tmpMin_X.clone();	//sora
            }
            else if (scale.options.type &&  scale.options.type=="category") {
                if (tmpMax_X)  scale.options.ticks.max = tmpMax_X;
                if (tmpMin_X)  scale.options.ticks.min= tmpMin_X;
            }
            //soramoto end
        });
        helpers.each(chartInstance.data.datasets, function (dataset, id) {
            dataset._meta = null;
        });
        chartInstance.update();//sora

        if (window.lastUnitStepSize){
            if (chartInstance.scales["x-axis-0"].options.time){
                chartInstance.scales["x-axis-0"].options.time.unitStepSize =window.lastUnitStepSize;
            }
            else if (chartInstance.scales["x-axis-0"].options.tick){
                chartInstance.scales["x-axis-0"].options.tick.unitStepSize =window.lastUnitStepSize;
            }
            chartInstance.update();//sora
        }

    }

    function resetChartMax()
    {
        var tmpMax_Y1, tmpMax_Y2;
        var helpers = Chart.helpers;
        var chartInstance = window.myBar;
        helpers.each(chartInstance.scales, function (scale, id) {
            if (scale.id=="x-axis-0") {
                if (scale.firstTick)
                {
                    if (scale.displayFormat){
                        window.scalemin=scale.firstTick.format(scale.displayFormat);
                    }
                    else{
                        window.scalemin=scale.firstTick.format('YYYY-MM-DD');
                    }
                }
                if (scale.lastTick)
                {
                    //console.log(scale.lastTick.format(scale.displayFormat));
                    if (scale.displayFormat){
                        window.scalemax=scale.lastTick.format(scale.displayFormat);
                    }
                    else{
                        window.scalemax=scale.lastTick.format('YYYY-MM-DD');
                    }
                }
                if (scale.max)
                {
                    window.scalemax=scale.max;
                }
                if (scale.min)
                {
                    window.scalemin=scale.min;
                }
                if (scale.minIndex && scale.maxIndex && scale.chart.data.datasets.length>0){
                    tmpMax_Y1=0;
                    for(var idx=scale.minIndex;idx<=scale.maxIndex;idx++){
                        tmpMax_Y1= Math.max(tmpMax_Y1, scale.chart.data.datasets[0].data[idx]);
                    }
                    //console.log("y1:d%",tmpMax_Y1);
                }
                if (scale.minIndex && scale.maxIndex && scale.chart.data.datasets.length>1){
                    tmpMax_Y2=0;
                    for(var idx=scale.minIndex;idx<=scale.maxIndex;idx++){
                        tmpMax_Y2= Math.max(tmpMax_Y2, scale.chart.data.datasets[1].data[idx]);
                    }
                    //console.log("y2:d%",tmpMax_Y2);
                }
                window.lastTickMax_Y1=tmpMax_Y1;
                window.lastTickMax_Y2=tmpMax_Y2;
                if (tmpMax_Y1)
                {
                    var maxY1=getMaxtick(tmpMax_Y1);
                    barConfig.options.scales.yAxes[0].ticks.max=maxY1;
                }
                if (tmpMax_Y2)
                {
                    var maxY2=getMaxtick(tmpMax_Y2);
                    barConfig.options.scales.yAxes[1].ticks.max=maxY2;
                }
            }
        });
    }

    function getMaxtick(dMax)
    {
        if (dMax > 10)
        {
            var len = Math.floor(dMax).toString().length - 1;
            var div =parseInt (Math.pow(10, len));
            var ticksMax = (Math.ceil(dMax / div) * div);
            if (ticksMax == dMax)
            {
                dMax = parseFloat(Math.ceil(dMax / div) * div) * 1.25;
            }
            else
            {
                dMax = ticksMax;
            }
        }
        else
        {
            dMax = Math.Ceiling(dMax * 1.25);
        }
        dMax =Math.max(1, dMax);
        return dMax;
    }

    function InitChartData() {
        var url = '@Url.Action("InitChart", "Chart")';
        var axis = new Array();
        for (var i = 0; i < $(".ChartAxis").length; i++) {
            var cmb = $($(".ChartAxis")[i]);
            var obj = { Index: cmb.attr("data-axisindex"), Key: cmb.val() };
            axis.push(obj);
        }

        var postData = { ChartAxis: axis,ChartType:barConfig.type,Min:window.scalemin,Max:window.scalemax };
        $.post(url, postData, function (r) {
            window.myBar.destroy();
            window.lastTickMax_Y1=null;
            window.lastTickMax_Y2=null;
            window.lastChartConfig=r;
            setChartConfig(r);
            var ctx = document.getElementById("canvas").getContext("2d");
            window.myBar = new Chart(ctx, barConfig);

            setChartScale(r);
        });
    }

    function setChartConfig(r)
    {
        barChartData.labels = r.barConfig.data.labels;
        barChartData.datasets = r.barConfig.data.datasets;

        barOptions.responsive = r.barConfig.options.responsive;
        barOptions.hoverMode = r.barConfig.options.hoverMode;
        barOptions.hoverAnimationDuration = r.barConfig.options.hoverAnimationDuration;
        barOptions.stacked = r.barConfig.options.stacked;

        barOptions.title = r.barConfig.options.title;
        //barOptions.scales = {};
        if (r.barConfig.options.scales.xAxes != null) {
            barOptions.scales.xAxes = r.barConfig.options.scales.xAxes;
        }
        barOptions.scales.yAxes[1].display = false;
        barOptions.scales.yAxes[1].scaleLabel.display = false;
        barOptions.scales.yAxes[0] = r.barConfig.options.scales.yAxes[0];
        if (r.barConfig.options.scales.yAxes.length > 1) {
            barOptions.scales.yAxes[1] = r.barConfig.options.scales.yAxes[1];
        }
        if (r.barConfig.options.zoom != null) {
            barOptions.zoom = r.barConfig.options.zoom;
        }

        barConfig.type = r.barConfig.type;
        barConfig.data = barChartData;
        barConfig.options = barOptions;
    }

    function setChartScale(r)
    {
        var helpers = Chart.helpers;
        chartInstance = window.myBar;
        helpers.each(chartInstance.scales, function (scale, id) {
            if (scale.id=="x-axis-0") {
                scale.options = helpers.configMerge(scale.options, scale.originalOptions);
                //soramoto start
                if (scale.options.type=="category") {
                    if (r.scaleMax) scale.options.ticks.max = r.scaleMax;
                    if (r.scaleMin) scale.options.ticks.min = r.scaleMin;
                }
                else if (scale.options.time) {
                    if (r.scaleMax) scale.options.time.max =new Date(r.scaleMax);
                    if (r.scaleMin) scale.options.time.min =new Date(r.scaleMin);	//sora
                }
            }
            //soramoto end
        });
        helpers.each(chartInstance.data.datasets, function (dataset, id) {
            dataset._meta = null;
        });
        chartInstance.update();//sora

        if (window.lastUnitStepSize){
            chartInstance.scales["x-axis-0"].options.time.unitStepSize =window.lastUnitStepSize;
            chartInstance.update();//sora
        }
    }

    </script>
    <script>
    var randomScalingFactor = function () {
        return Math.abs((Math.random() > 0.5 ? 1.0 : -1.0) * Math.round(Math.random() * 100));
    };
    var randomColorFactor = function () {
        return Math.round(Math.random() * 255);
    };
    var randomColor = function () {
        return 'rgba(' + randomColorFactor() + ',' + randomColorFactor() + ',' + randomColorFactor() + ',.7)';
    };

    var barChartData = {
        labels: ['loading'],
        datasets: []
    };

    var barOptions = {
        responsive: true,
        hoverMode: 'index',
        hoverAnimationDuration: 400,
        stacked: false,
        onClick: function (o, e) {
            window.lastUnitStepSize=null;
            if (window.myBar.scales["x-axis-0"].scaleSizeInUnits != null) {
                //console.log(window.myBar.scales["x-axis-0"].scaleSizeInUnits);
                var unitStepSize= parseInt(Math.max(1, window.myBar.scales["x-axis-0"].scaleSizeInUnits / 10));
                window.lastUnitStepSize=unitStepSize;
                window.myBar.scales["x-axis-0"].options.time.unitStepSize =unitStepSize;
                window.myBar.update(0);
            }
            resetChartMax();
        },
        title: {
            display: false,
            text: "@Model.Title"
        },
        scales: {
            xAxes: [{
            }],
            yAxes: [{
                type: "linear", // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
                display: true,
                position: "left",
                scaleLabel: {
                    display: true,
                    labelString: 'label1'
                },
                id: "y-axis-1",
            }, {
                type: "linear", // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
                display: false,
                scaleLabel: {
                    display: false,
                    labelString: 'label2'
                },
                position: "right",
                id: "y-axis-2",
                gridLines: {
                    drawOnChartArea: false
                }
            }],
        },
        zoom: {
            enabled: true,
            drag: true,
            mode: 'x',
            limits: {
                max: 10,
                min: 0.5
            },
            sensitivity:@Model.ZoomSensitivity,
        }
    };

    var barConfig={
        type: '@Model.ChartTypes[0]',
        data: barChartData,
        options: barOptions
    };

    </script>
}
